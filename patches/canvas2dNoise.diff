diff --git a/third_party/blink/renderer/modules/canvas/canvas2d/canvas_path.cc b/third_party/blink/renderer/modules/canvas/canvas2d/canvas_path.cc
index 10adf1dff95d4..fdc269080c457 100644
--- a/third_party/blink/renderer/modules/canvas/canvas2d/canvas_path.cc
+++ b/third_party/blink/renderer/modules/canvas/canvas2d/canvas_path.cc
@@ -760,6 +780,83 @@ void CanvasPath::Trace(Visitor* visitor) const {
   visitor->Trace(identifiability_study_helper_);
 }

+scoped_refptr<blink::StaticBitmapImage> CanvasPath::AddNoises(
+  const scoped_refptr<blink::StaticBitmapImage>& image,
+  bool onlyRgbDifferent) {
+
+  SkImageInfo info = image->GetSkImageInfo();
+  auto pixels = image->CopyImageData(info, false);
+
+  auto bytesPerPixel = static_cast<size_t>(info.bytesPerPixel());
+  size_t imageTop = 0;
+  size_t imageLeft = 0;
+  size_t imageWidth = info.width();
+  size_t imageHeight = info.height();
+  bool noiseInjected = false;
+
+  for (size_t saltIndex = 0, y = imageTop; y < imageHeight - 1; y += 2) {
+    for (size_t x = imageLeft; x < imageWidth - 1; x += 2) {
+      size_t pos = y * imageWidth + x;
+      uint8_t* p0 = &pixels[(pos) * bytesPerPixel];
+      uint8_t* p1 = &pixels[(pos + 1) * bytesPerPixel];
+
+      // Check if RGB values are equal
+      bool rgbEqual = (p0[0] == p1[0] && p0[1] == p1[1] && p0[2] == p1[2]);
+      // Check if Alpha channels are different
+      bool alphaDifferent = p0[3] != p1[3];
+
+      if ((onlyRgbDifferent && !rgbEqual) ||
+        (rgbEqual && alphaDifferent)
+      ) {
+        // Add noise to the alpha channel
+        int noise = noises[saltIndex].GetInt();
+        p0[3] = static_cast<uint8_t>(std::min(p0[3] + noise, 255));
+        noiseInjected = true;
+
+        // Update noise index, loop through noise list
+        saltIndex = (saltIndex + 1) % noises.size();
+      }
+    }
+  }
+
+  sk_sp<SkData> dst_pixels = SkData::MakeWithCopy(pixels.data(), pixels.size());
+  return StaticBitmapImage::Create(
+      std::move(dst_pixels), info, image->CurrentFrameOrientation());
+}